#!/usr/bin/sh

######################################################################
# vim: set ts=4 sts=4 sw=4 expandtab:
# @author      : yetist (yetist@yetipc)
# @file        : a
# @created     : 星期六 11月 19, 2022 10:51:30 CST
#
# @description :
######################################################################

APP_TOP_DIR="/opt/wine-apps"
WINE_DIR_PREFIX="/opt/wine"

# App 名称
APP_NAME=$(basename $0)
# App 中文名称
APP_NAME_CN=""
# App 版本号
APP_VERSION="1.0"
# App 压缩包文件名
APP_ARCHIVE=""
# App 升级时需要忽略的文件列表
APP_IGNORE=""
# App 运行时需要进入的路径
APP_RUN_PATH=""
# App 运行命令
APP_RUN_CMD=""
# App 运行时使用的 wine 版本号
APP_RUN_WINE=""

OPT_RESET=n
OPT_HELP=n

APP_DIR=$APP_TOP_DIR/$APP_NAME

if [ -f $APP_DIR/$APP_NAME.metainfo ]; then
    source $APP_DIR/$APP_NAME.metainfo
else
    zenity --error --text="出错啦！" --text="找不到 $APP_DIR/$APP_NAME.metainfo 文件，请检查安装包是否正确"
    exit
fi

WINE_DIR=${WINE_DIR_PREFIX}-${APP_RUN_WINE}
export WINEDLLPATH=$WINE_DIR/lib:$WINE_DIR/lib64
export WINEPREDLL="$APP_DIR/lib"
export WINEPREFIX=$HOME/.local/share/wineprefixes/$APP_NAME
WINE_CMD="wine"

if [ "x$APP_RUN_WINE" != "x" ] && [ -x $WINE_DIR/bin/wine ]; then
    WINE_CMD=$WINE_DIR/bin/wine
fi

app_uninstall()
{
    rm -rf $WINEPREFIX
}

usage()
{
    cat << ENDLINE
$0 [OPTIONS...]

运行当前容器的默认应用程序-`basename $APP_RUN_CMD`

Option:
  -c --console  打开当前容器的终端
  -f --winefile 打开当前容器的文件管理器
  -s --winecfg  打开当前容器的设置工具
  -r --regedit  打开当前容器的注册表
  -t --taskmgr  打开当前容器的任务管理器
  -e --reset    重置当前容器到首次安装状态
  -h --help     显示帮助
ENDLINE
}

fix_disk_link()
{
    if [ -d $WINEPREFIX ];then
        pushd "$WINEPREFIX/dosdevices" >/dev/null
        rm -f c: z:
        ln -sf ../drive_c c:
        ln -sf / z:
        popd > /dev/null
    fi
}

app_install()
{
    mkdir -p $WINEPREFIX
    tar xf $APP_DIR/$APP_ARCHIVE -C $WINEPREFIX
    if [ -d "$WINEPREFIX/drive_c/users/@current_user@" ]; then
        mv "$WINEPREFIX/drive_c/users/@current_user@" "$WINEPREFIX/drive_c/users/$USER"
        if [ -f $HOME/.config/user-dirs.dirs ]; then
            source $HOME/.config/user-dirs.dirs
            ln -sf $XDG_DESKTOP_DIR $WINEPREFIX/drive_c/users/$USER/Desktop
            ln -sf $XDG_DOWNLOAD_DIR $WINEPREFIX/drive_c/users/$USER/Downloads
            ln -sf $XDG_DOCUMENTS_DIR $WINEPREFIX/drive_c/users/$USER/Documents
            ln -sf $XDG_MUSIC_DIR $WINEPREFIX/drive_c/users/$USER/Music
            ln -sf $XDG_PICTURES_DIR $WINEPREFIX/drive_c/users/$USER/Pictures
            ln -sf $XDG_VIDEOS_DIR $WINEPREFIX/drive_c/users/$USER/Videos
        else
            ln -sf /home/$USER/桌面 $WINEPREFIX/drive_c/users/$USER/Desktop
            ln -sf /home/$USER/文档 $WINEPREFIX/drive_c/users/$USER/Documents
            ln -sf /home/$USER/下载 $WINEPREFIX/drive_c/users/$USER/Downloads
            ln -sf /home/$USER/音乐 $WINEPREFIX/drive_c/users/$USER/Music
            ln -sf /home/$USER/图片 $WINEPREFIX/drive_c/users/$USER/Pictures
            ln -sf /home/$USER/视频 $WINEPREFIX/drive_c/users/$USER/Videos
        fi
    fi
    sed -i "s#@current_user@#$USER#g" $WINEPREFIX/*.reg
    echo "$APP_VERSION" > "$WINEPREFIX/app_version"
    fix_disk_link
}

app_update()
{
    if [ -f "$WINEPREFIX/app_version" ] && [ "$(cat "$WINEPREFIX/app_version")" = "$APP_VERSION" ]; then
        return
    fi

    if [ ! -f $APP_IGNORE ]; then
        APP_IGNORE=`mktemp /tmp/.appignore.XXXX`
        cat > $APP_IGNORE << EOF
user.reg
userdef.reg
system.reg
EOF
    fi
    tar xf $APP_DIR/$APP_ARCHIVE -C $WINEPREFIX --exclude-from=$APP_IGNORE
    rm -f $APP_IGNORE

    if [ -d "$WINEPREFIX/drive_c/users/@current_user@" ]; then
        mv "$WINEPREFIX/drive_c/users/@current_user@" "$WINEPREFIX/drive_c/users/$USER"
        ln -sf /home/$USER/桌面 $WINEPREFIX/drive_c/users/$USER/Desktop
        ln -sf /home/$USER/文档 $WINEPREFIX/drive_c/users/$USER/Documents
        ln -sf /home/$USER/下载 $WINEPREFIX/drive_c/users/$USER/Downloads
        ln -sf /home/$USER/音乐 $WINEPREFIX/drive_c/users/$USER/Music
        ln -sf /home/$USER/图片 $WINEPREFIX/drive_c/users/$USER/Pictures
        ln -sf /home/$USER/视频 $WINEPREFIX/drive_c/users/$USER/Videos
    fi

    echo "$APP_VERSION" > "$WINEPREFIX/app_version"
}

app_run()
{
    local name=$APP_NAME
    if [ "x$APP_NAME_CN" != "x" ];then
        name=$APP_NAME_CN
    fi
    if [ ! -d "$WINEPREFIX" ]; then
        app_install | progressbar $name "首次启动，初始化$name中..."
    else
        app_update | progressbar $name "正在更新$name中..."
    fi
    if [ -n "$APP_RUN_PATH" ];then
        cd "$WINEPREFIX/$APP_RUN_PATH"
        exec $WINE_CMD $APP_RUN_CMD
    else
        exec $WINE_CMD "$WINEPREFIX/$APP_RUN_CMD"
    fi
}

progressbar()
{
    WINDOWID="" zenity --progress --title="$1" --text="$2" --pulsate --width=400 --auto-close --no-cancel
}

##################################
set -o errexit -o pipefail -o noclobber -o nounset

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'I’m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

LONGOPTS=console,reset,winefile,winecfg,help,regedit,taskmgr
OPTIONS=cefshrt

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

while true; do
    case "$1" in
        -c|--console)
            APP_RUN_PATH="drive_c/windows"
            APP_RUN_CMD=wineconsole
            shift
            ;;
        -e|--reset)
            OPT_RESET=y
            shift
            ;;
        -f|--winefile)
            APP_RUN_PATH="drive_c/windows"
            APP_RUN_CMD=winefile
            shift
            ;;
        -r|--regedit)
            APP_RUN_PATH="drive_c/windows"
            APP_RUN_CMD=regedit
            shift
            ;;
        -s|--winecfg)
            APP_RUN_PATH="drive_c/windows"
            APP_RUN_CMD=winecfg
            shift
            ;;
        -t|--taskmgr)
            APP_RUN_PATH="drive_c/windows"
            APP_RUN_CMD=taskmgr
            shift
            ;;
        -h|--help)
            OPT_HELP=y
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

if [ $OPT_HELP == "y" ];then
    usage
    exit 0
fi

if ! command -v zenity >/dev/null 2>&1;then
    echo "please install package zenity"
    exit 1
fi

if [ $APP_NAME == "wine-run" ]; then
    echo "nothing to do"
    exit 1
fi

if [ "x${OPT_RESET}" == "xy" ]; then
    app_uninstall
    exit
fi
app_run
